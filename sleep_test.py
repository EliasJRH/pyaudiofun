import time
import threading
import pygame


# Define the action to be performed
def perform_action(x):
    print(f"Action performed at {time.time()} for delay: {x} seconds")


# Example list of integers in increasing order representing seconds
# beats = [(1, 0), (1, 0.1875), (1, 0.375), (1, 0.5625), (1, 0.75), (1, 0.9375), (1, 1.125), (1, 1.3125), (2, 1.5), (2, 1.6875), (2, 1.875), (2, 2.0625), (2, 2.25), (2, 2.4375), (2, 2.625), (2, 2.8125), (3, 3.0), (3, 3.1875), (3, 3.375), (3, 3.5625), (3, 3.75), (3, 3.9375), (3, 4.125), (3, 4.3125), (4, 4.5), (4, 4.6875), (4, 4.875), (4, 5.0625), (4, 5.25), (4, 5.625), (5, 6.0), (5, 7.125), (6, 7.5), (7, 9.0), (7, 9.5625), (7, 10.125), (8, 10.5), (9, 12.0), (9, 13.125), (10, 13.5), (10, 14.25), (11, 15.0), (11, 15.75), (12, 16.5), (12, 17.25), (13, 18.375), (13, 18.75), (13, 19.125), (14, 19.5), (14, 19.875), (14, 20.25), (14, 20.625), (15, 21.375), (15, 21.75), (15, 22.125), (16, 22.5), (16, 22.875), (16, 23.25), (16, 23.625), (17, 24.375), (17, 24.75), (17, 25.125), (18, 25.5), (18, 25.875), (18, 26.25), (18, 26.625), (19, 27.375), (19, 27.75), (19, 28.125), (20, 28.875), (20, 29.25), (20, 29.625), (21, 30.375), (21, 30.75), (21, 31.125), (22, 31.5), (22, 31.875), (22, 32.25), (22, 32.625), (23, 33.375), (23, 33.75), (23, 34.125), (24, 34.5), (24, 35.25), (25, 36.0), (25, 36.75), (26, 37.5), (26, 37.62), (26, 37.739999999999995), (26, 37.85999999999999), (26, 37.97999999999999), (26, 38.09999999999999), (26, 38.219999999999985), (26, 38.33999999999998), (27, 38.45999999999998)]


beats = [(1, 0), (1, 0.2647058823529412), (1, 0.35294117647058826), (1, 0.7058823529411765), (1, 0.9705882352941178), (1, 1.0588235294117647), (2, 1.411764705882353), (2, 1.7647058823529413), (2, 2.1176470588235294), (2, 2.4705882352941178), (2, 2.735294117647059), (2, 3.0), (2, 3.264705882352941), (2, 3.3529411764705883), (2, 3.4411764705882355), (2, 3.882352941176471), (2, 4.058823529411765), (2, 4.23529411764706), (4, 10.764705882352942), (4, 10.941176470588236), (5, 11.117647058823529), (5, 11.294117647058822), (5, 11.470588235294116), (5, 11.64705882352941), (5, 11.999999999999996), (5, 12.352941176470585), (6, 12.529411764705879), (6, 12.705882352941172), (6, 12.882352941176466), (6, 13.05882352941176), (6, 13.411764705882346), (6, 13.764705882352935), (7, 13.941176470588228), (7, 14.117647058823522), (7, 14.294117647058815), (7, 14.470588235294109), (7, 14.823529411764696), (7, 15.176470588235285), (8, 15.529411764705872), (9, 16.764705882352935), (9, 16.94117647058823), (9, 17.117647058823522), (9, 17.294117647058815), (9, 17.647058823529402), (9, 17.99999999999999), (10, 18.176470588235283), (10, 18.352941176470576), (10, 18.52941176470587), (10, 18.705882352941163), (10, 19.05882352941175), (10, 19.411764705882337), (11, 19.58823529411763), (11, 19.764705882352924), (11, 19.941176470588218), (11, 20.11764705882351), (11, 20.470588235294098), (11, 20.823529411764685), (12, 20.99999999999998), (12, 21.705882352941156), (13, 22.76470588235292), (13, 23.117647058823508), (13, 23.470588235294095), (14, 23.999999999999975), (14, 24.17647058823527), (14, 24.352941176470562), (14, 24.529411764705856), (14, 24.882352941176443), (14, 25.058823529411736), (15, 25.23529411764703), (15, 25.411764705882323), (15, 25.588235294117617), (15, 25.76470588235291), (15, 26.117647058823497), (15, 26.470588235294084), (16, 26.647058823529377), (16, 26.82352941176467), (16, 26.999999999999964), (16, 27.176470588235258), (16, 27.35294117647055), (16, 27.529411764705845), (16, 27.882352941176432), (17, 28.23529411764702), (17, 29.29411764705878), (18, 29.470588235294073), (18, 29.647058823529367), (18, 29.82352941176466), (18, 29.999999999999954), (18, 30.35294117647054), (18, 30.705882352941128), (19, 30.88235294117642), (19, 31.058823529411715), (19, 31.23529411764701), (19, 31.4117647058823), (19, 32.11764705882348), (20, 32.294117647058776), (20, 32.47058823529407), (20, 32.64705882352937), (20, 32.82352941176467), (20, 33.17647058823526), (20, 33.35294117647056), (21, 33.705882352941146), (21, 34.05882352941173), (22, 35.47058823529408), (22, 35.64705882352938), (22, 35.823529411764675), (22, 35.99999999999997), (22, 36.17647058823527), (23, 36.70588235294115), (23, 36.88235294117645), (23, 37.05882352941175), (23, 37.235294117647044), (23, 37.41176470588234), (23, 37.58823529411764), (23, 37.764705882352935), (24, 37.94117647058823), (24, 38.11764705882353), (24, 38.294117647058826), (24, 38.47058823529412), (24, 38.82352941176472), (24, 39.000000000000014), (25, 39.3529411764706), (26, 40.941176470588246), (26, 41.11764705882354), (26, 41.29411764705884), (26, 41.47058823529414), (26, 41.647058823529434), (26, 41.82352941176473), (26, 42.00000000000003), (26, 42.176470588235325), (26, 42.35294117647062), (26, 42.52941176470592), (26, 42.70588235294122), (26, 42.882352941176514), (26, 43.05882352941181), (26, 43.23529411764711), (26, 43.588235294117695), (27, 44.11764705882358), (27, 44.294117647058876), (27, 44.47058823529417), (27, 44.64705882352947), (27, 44.82352941176477), (27, 45.000000000000064), (27, 45.17647058823536), (27, 45.35294117647066), (27, 45.529411764705955), (27, 45.70588235294125), (27, 45.88235294117655), (27, 46.058823529411846), (27, 46.23529411764714), (27, 46.41176470588244), (27, 46.76470588235303), (28, 47.117647058823614), (28, 47.29411764705891), (28, 47.47058823529421), (28, 47.647058823529505), (28, 47.8235294117648), (28, 48.17647058823539), (29, 48.529411764705976), (30, 50.11764705882362), (30, 50.29411764705892), (30, 50.470588235294215), (30, 50.64705882352951), (30, 51.0000000000001), (30, 51.1764705882354), (31, 51.352941176470694), (31, 51.52941176470599), (31, 51.70588235294129), (31, 51.882352941176585), (31, 52.23529411764718), (31, 52.411764705882476), (31, 52.58823529411777), (32, 52.76470588235307), (32, 53.11764705882366), (32, 53.470588235294244), (32, 53.64705882352954), (32, 54.00000000000013), (33, 54.52941176470602), (33, 54.882352941176606), (33, 55.23529411764719), (34, 55.76470588235308), (34, 55.941176470588374), (34, 56.11764705882367), (34, 56.29411764705897), (34, 56.647058823529555), (35, 57.00000000000014), (35, 57.17647058823544), (35, 57.352941176470736), (35, 57.52941176470603), (35, 57.70588235294133), (35, 58.05882352941192), (36, 58.411764705882504), (36, 58.5882352941178), (36, 59.117647058823685), (36, 59.29411764705898), (37, 59.823529411764866), (38, 61.41176470588252), (38, 61.588235294117815), (38, 61.76470588235311), (38, 61.94117647058841), (38, 62.294117647059), (39, 62.64705882352958), (39, 62.82352941176488), (39, 63.00000000000018), (39, 63.176470588235475), (39, 63.35294117647077), (39, 63.70588235294136), (40, 64.05882352941195), (40, 64.23529411764724), (40, 64.76470588235313), (40, 64.94117647058842), (41, 65.4705882352943), (41, 66.17647058823547), (43, 68.294117647059), (43, 68.55882352941194), (43, 68.64705882352959), (43, 69.00000000000018), (43, 69.26470588235313), (43, 69.35294117647078), (44, 69.70588235294137), (44, 70.05882352941197), (44, 70.41176470588256), (44, 70.76470588235316), (44, 71.0294117647061), (44, 71.29411764705904), (44, 71.55882352941198), (44, 71.64705882352963), (44, 71.73529411764729), (44, 72.17647058823553), (44, 72.35294117647082), (44, 72.52941176470611), (46, 79.058823529412), (46, 79.23529411764729), (47, 79.41176470588258), (47, 79.58823529411787), (47, 79.76470588235316), (47, 79.94117647058845), (47, 80.29411764705902), (47, 80.64705882352962), (48, 80.82352941176491), (48, 81.0000000000002), (48, 81.17647058823549), (48, 81.35294117647078), (48, 81.70588235294136), (48, 82.05882352941195), (49, 82.23529411764724), (49, 82.41176470588253), (49, 82.58823529411782), (49, 82.76470588235311), (49, 83.11764705882369), (49, 83.47058823529429), (50, 83.82352941176487), (51, 85.05882352941194), (51, 85.23529411764723), (51, 85.41176470588252), (51, 85.58823529411781), (51, 85.94117647058839), (51, 86.29411764705898), (52, 86.47058823529427), (52, 86.64705882352956), (52, 86.82352941176485), (52, 87.00000000000014), (52, 87.35294117647072), (52, 87.70588235294132), (53, 87.8823529411766), (53, 88.0588235294119), (53, 88.23529411764719), (53, 88.41176470588248), (53, 88.76470588235306), (53, 89.11764705882365), (54, 89.29411764705894), (54, 90.00000000000011), (55, 91.05882352941188), (55, 91.41176470588248), (55, 91.76470588235307), (56, 92.29411764705895), (56, 92.47058823529424), (56, 92.64705882352953), (56, 92.82352941176482), (56, 93.17647058823542), (56, 93.35294117647071), (57, 93.529411764706), (57, 93.70588235294129), (57, 93.88235294117658), (57, 94.05882352941187), (57, 94.41176470588245), (57, 94.76470588235304), (58, 94.94117647058833), (58, 95.11764705882362), (58, 95.29411764705891), (58, 95.4705882352942), (58, 95.64705882352949), (58, 95.82352941176478), (58, 96.17647058823538), (59, 96.52941176470596), (59, 97.58823529411772), (60, 97.76470588235301), (60, 97.9411764705883), (60, 98.1176470588236), (60, 98.29411764705888), (60, 98.64705882352946), (60, 99.00000000000006), (61, 99.17647058823535), (61, 99.35294117647064), (61, 99.52941176470593), (61, 99.70588235294122), (61, 100.41176470588239), (62, 100.58823529411768), (62, 100.76470588235297), (62, 100.94117647058826), (62, 101.11764705882355), (62, 101.47058823529413), (62, 101.64705882352942), (63, 102.00000000000001), (63, 102.35294117647061), (64, 103.76470588235297), (64, 103.94117647058826), (64, 104.11764705882355), (64, 104.29411764705884), (64, 104.47058823529413), (65, 105.00000000000001), (65, 105.1764705882353), (65, 105.3529411764706), (65, 105.52941176470588), (65, 105.70588235294117), (65, 105.88235294117646), (65, 106.05882352941175), (66, 106.23529411764704), (66, 106.41176470588233), (66, 106.58823529411762), (66, 106.76470588235291), (66, 107.1176470588235), (66, 107.29411764705878), (67, 107.64705882352938), (68, 109.23529411764703), (68, 109.41176470588232), (68, 109.58823529411761), (68, 109.7647058823529), (68, 109.94117647058819), (68, 110.11764705882348), (68, 110.29411764705877), (68, 110.47058823529406), (68, 110.64705882352935), (68, 110.82352941176464), (68, 110.99999999999993), (68, 111.17647058823522), (68, 111.35294117647051), (68, 111.5294117647058), (68, 111.88235294117639), (69, 112.41176470588228), (69, 112.58823529411757), (69, 112.76470588235286), (69, 112.94117647058815), (69, 113.11764705882344), (69, 113.29411764705873), (69, 113.47058823529402), (69, 113.6470588235293), (69, 113.8235294117646), (69, 113.99999999999989), (69, 114.17647058823518), (69, 114.35294117647047), (69, 114.52941176470576), (69, 114.70588235294105), (69, 115.05882352941164), (70, 115.41176470588223), (70, 115.58823529411752), (70, 115.76470588235281), (70, 115.9411764705881), (70, 116.1176470588234), (70, 116.47058823529399), (71, 116.82352941176458), (72, 118.41176470588223), (72, 118.58823529411752), (72, 118.76470588235281), (72, 118.9411764705881), (72, 119.2941176470587), (72, 119.47058823529399), (73, 119.64705882352928), (73, 119.82352941176457), (73, 119.99999999999986), (73, 120.17647058823515), (73, 120.52941176470573), (73, 120.70588235294102), (73, 120.88235294117631), (74, 121.0588235294116), (74, 121.41176470588219), (74, 121.76470588235279), (74, 121.94117647058808), (74, 122.29411764705867), (75, 122.82352941176454), (75, 123.17647058823513), (75, 123.52941176470573), (76, 124.05882352941161), (76, 124.2352941176469), (76, 124.41176470588219), (76, 124.58823529411748), (76, 124.94117647058808), (77, 125.29411764705867), (77, 125.47058823529396), (77, 125.64705882352925), (77, 125.82352941176454), (77, 125.99999999999983), (77, 126.35294117647042), (78, 126.70588235294102), (78, 126.88235294117631), (78, 127.41176470588219), (78, 127.58823529411748), (79, 128.11764705882337), (80, 129.70588235294102), (80, 129.88235294117632), (80, 130.05882352941163), (80, 130.23529411764693), (80, 130.5882352941175), (81, 130.9411764705881), (81, 131.1176470588234), (81, 131.2941176470587), (81, 131.470588235294), (81, 131.6470588235293), (81, 131.9999999999999), (82, 132.35294117647047), (82, 132.52941176470577), (82, 133.05882352941165), (82, 133.23529411764696), (83, 133.76470588235284), (83, 134.47058823529403)]
# Define a function to wait and perform the action
def schedule_action(delay):
    time.sleep(delay)
    perform_action(delay)


# Schedule each action
pygame.mixer.init()
# pygame.mixer.music.load("songs/Gravity Falls/Gravity_Falls_Opening_-_Intermediate_Piano_Solo.mid")
pygame.mixer.music.load("songs/Phinease and Ferb/Phineas_and_ferb_theme_–_Bowling_for_Soup_Phineas_and_Ferb_-_Theme_song.mid")
pygame.mixer.music.play(-1)
start_time = time.perf_counter()
for delay in beats:
    # elapsed_time = time.perf_counter() - start_time
    # # Calculate the remaining wait time considering the elapsed time
    # remaining_time = delay[1] - elapsed_time
    # if remaining_time > 0:
    threading.Thread(target=schedule_action, args=(delay[1],)).start()

print("All actions scheduled.")
